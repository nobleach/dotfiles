return {
	-- "hrsh7th/nvim-cmp",
	-- "iguanacucumber/magazine.nvim",
	-- name = "nvim-cmp", -- Otherwise highlighting gets messed up
	-- event = "InsertEnter",
	-- dependencies = {
	-- 	"hrsh7th/cmp-buffer", -- source for text in buffer
	-- 	"hrsh7th/cmp-path", -- source for file system paths
	-- 	"L3MON4D3/LuaSnip", -- snippet engine
	-- 	"saadparwaiz1/cmp_luasnip", -- for autocompletion
	-- 	"rafamadriz/friendly-snippets", -- useful snippets
	-- 	"mlaursen/vim-react-snippets",
	-- 	"onsails/lspkind.nvim", -- vs-code like pictograms
	-- },
	-- config = function()
	-- 	local cmp = require("cmp")
	--
	-- 	local luasnip = require("luasnip")
	--
	-- 	-- React snippets
	-- 	require("vim-react-snippets").lazy_load()
	--
	-- 	-- Set LuaSnip keymaps
	-- 	vim.keymap.set({ "i" }, "<C-K>", function()
	-- 		luasnip.expand()
	-- 	end, { silent = true })
	-- 	vim.keymap.set({ "i", "s" }, "<C-L>", function()
	-- 		luasnip.jump(1)
	-- 	end, { silent = true })
	-- 	vim.keymap.set({ "i", "s" }, "<C-J>", function()
	-- 		luasnip.jump(-1)
	-- 	end, { silent = true })
	--
	-- 	vim.keymap.set({ "i", "s" }, "<C-E>", function()
	-- 		if luasnip.choice_active() then
	-- 			luasnip.change_choice(1)
	-- 		end
	-- 	end, { silent = true })
	--
	-- 	local lspkind = require("lspkind")
	--
	-- 	-- loads vscode style snippets from installed plugins (e.g. friendly-snippets)
	-- 	require("luasnip.loaders.from_vscode").lazy_load({ paths = { "./lua/jim/snippets" } })
	-- 	require("luasnip.loaders.from_vscode").lazy_load()
	-- 	require("luasnip.loaders.from_lua").load({ paths = { "./lua/jim/snippets" } })
	--
	-- 	cmp.setup({
	-- 		completion = {
	-- 			completeopt = "menu,menuone,preview,noselect",
	-- 		},
	-- 		snippet = { -- configure how nvim-cmp interacts with snippet engine
	-- 			expand = function(args)
	-- 				luasnip.lsp_expand(args.body)
	-- 			end,
	-- 		},
	-- 		window = {
	-- 			completion = cmp.config.window.bordered(),
	-- 			documentation = cmp.config.window.bordered(),
	-- 		},
	-- 		mapping = cmp.mapping.preset.insert({
	-- 			["<C-p>"] = cmp.mapping.select_prev_item(), -- previous suggestion
	-- 			["<C-n>"] = cmp.mapping.select_next_item(), -- next suggestion
	-- 			["<C-b>"] = cmp.mapping.scroll_docs(-4),
	-- 			["<C-f>"] = cmp.mapping.scroll_docs(4),
	-- 			["<C-Space>"] = cmp.mapping.complete(), -- show completion suggestions
	-- 			["<C-e>"] = cmp.mapping.abort(), -- close completion window
	-- 			["<CR>"] = cmp.mapping.confirm({ select = true }),
	-- 		}),
	-- 		-- sources for autocompletion
	-- 		sources = cmp.config.sources({
	-- 			{
	-- 				name = "nvim_lsp",
	-- 			},
	-- 			{ name = "luasnip" }, -- snippets
	-- 			{ name = "path" }, -- file system paths
	-- 			{
	-- 				name = "buffer",
	-- 				get_bufnrs = function()
	-- 					return vim.api.nvim_list_bufs()
	-- 				end,
	-- 			},
	-- 		}),
	-- 		-- configure lspkind for vs-code like pictograms in completion menu
	-- 		formatting = {
	-- 			format = lspkind.cmp_format({
	-- 				maxwidth = 50,
	-- 				ellipsis_char = "...",
	-- 				menu = {
	-- 					path = "[Path]",
	-- 					nvim_lsp = "[LSP]",
	-- 					luasnip = "[Snip]",
	-- 					buffer = "[Buf]",
	-- 				},
	-- 			}),
	-- 		},
	-- 	})
	--
	-- 	-- Set configuration for specific filetype.
	-- 	cmp.setup.filetype("gitcommit", {
	-- 		sources = cmp.config.sources({
	-- 			{ name = "cmp_git" }, -- You can specify the `cmp_git` source if you were installed it.
	-- 		}, {
	-- 			{ name = "buffer" },
	-- 		}),
	-- 	})
	--
	-- 	cmp.setup.filetype("sql", {
	-- 		sources = {
	-- 			{ name = "vim-dadbod-completion" },
	-- 			{ name = "buffer" },
	-- 		},
	-- 	})
	--
	-- 	-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
	-- 	cmp.setup.cmdline("/", {
	-- 		mapping = cmp.mapping.preset.cmdline(),
	-- 		sources = {
	-- 			{ name = "buffer" },
	-- 		},
	-- 	})
	--
	-- 	-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
	-- 	cmp.setup.cmdline(":", {
	-- 		mapping = cmp.mapping.preset.cmdline(),
	-- 		sources = cmp.config.sources({
	-- 			{ name = "path" },
	-- 		}, {
	-- 			{ name = "cmdline" },
	-- 		}),
	-- 	})
	-- end,
}
