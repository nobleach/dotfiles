{
  "expect.assertions": {
    "prefix": "ea",
    "body": "expect.assertions($1);",
    "description": "Expect Assertions"
  },
  "beforeEach": {
    "prefix": "be",
    "body": "beforeEach(() => {\n});",
    "description": "beforeEach"
  },
  "describe lambda": {
    "prefix": "des",
    "body": "describe('${1:description}', () => {\n});",
    "description": "describe lambda"
  },
  "it lambda": {
    "prefix": "it",
    "body": "it('${1:description}', () => {\n\t$0});",
    "description": "it lambda"
  },
  "it async lambda": {
    "prefix": "ita",
    "body": "it('${1:description}', async () => {\n});",
    "description": "it async lambda"
  },
  "async test lambda": {
    "prefix": "ate",
    "body": "test('${1:description}', async () => {\n});",
    "description": "async test lambda"
  },
  "toEqual": {
    "prefix": "te",
    "body": ".toEqual($1);",
    "description": "toEqual"
  },
  "Sinon stub": {
    "prefix": "ss",
    "body": "sinon.stub()",
    "description": "Sinon stub"
  },
  "Sinon stub with returns": {
    "prefix": "ssr",
    "body": "sinon.stub()\n\t.returns($1);",
    "description": "Sinon stub with returns"
  },
  "Cypress get class^=": {
    "prefix": "cgc",
    "body": "cy.get('[class^=$1]')",
    "description": "Cypress get class^="
  },
  "Cypress get data-cy=": {
    "prefix": "cdg",
    "body": "cy.get('[data-cy=$1]')",
    "description": "Cypress get data-cy="
  },
  "Cypress should callback": {
    "prefix": "csnc",
    "body": ".should($node => {\n\texpect($node)$1\n});",
    "description": "Cypress should callback"
  },
  "FeatureFlag": {
    "prefix": "ff",
    "body": "<FeatureFlag\n\tdescription=\"\"\n\tflagConfig=\"\"\n\tsiteTestName=\"\"\n\t${1:skipReport}\n>\n\t<FeatureVariant variant={'$2'}>\n\t</FeatureVariant>\n</FeatureFlag>",
    "description": "FeatureFlag"
  },
  "AboveTheFoldOnlyServerRender": {
    "prefix": "abv",
    "body": "<AboveTheFoldOnlyServerRender skip>\n\t$1\n</AboveTheFoldOnlyServerRender>",
    "description": "AboveTheFoldOnlyServerRender"
  },
  "Andrew Style Log": {
    "prefix": "asl",
    "body": "console.log(`\n\n\n\n\n$1\n\n\n\n`, $2);",
    "description": "Andrew Style Log"
  },
  "Jim Style Log": {
    "prefix": "jsl",
    "body": "console.log('$1', $1);",
    "description": "Jim Style Log"
  },
  "Console Log": {
    "prefix": "cl",
    "body": "console.log($1);",
    "description": "Console Log"
  },
  "Try/Catch (no Finally)": {
    "prefix": "tc",
    "body": "try {\n} catch (e) {\n}",
    "description": "Try/Catch (no Finally)"
  },
  "Create Action": {
    "prefix": "ca",
    "body": "export const $1 = '$1';",
    "description": "Register Redux Action"
  },
  "Render React Component Test": {
    "prefix": "rrct",
    "body": "import React from 'react';\nimport { shallow } from 'enzyme';\nimport { $1 } from './$1';\n\ndescribe('$1', () => {\n\tit('should render null when $1 is not supposed to render', () => {\n\t\tconst wrapper = shallow(<$1 ${2:shouldShowComponentVar}={false} />);\n\t\texpect(wrapper.type()).toEqual(null);\n\t});\n\n\tit('description', () => {\n\t\tconst wrapper = shallow(<$1 ${2:shouldShowComponentVar}={true} />);\n\t\texpect(wrapper.find('.className').length).toEqual(1);\n\t});\n});\n",
    "description": "Render React Component Test"
  },
  "Create Reducer": {
    "prefix": "red",
    "body": "export function ${1:entity}Reducer(state = {}, action = {}) {\n\tswitch (action.type) {\n\t\tcase ${2:ACTION}: {\n\t\t\treturn state;\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}",
    "description": "Create Reducer"
  },
  "create selector": {
		"scope": "javascript,jsx,html, react",
    "prefix": "csel",
    "body": "export const ${1:name} = createSelector(\n);",
    "description": "create selector"
  },
  "get state selector": {
    "prefix": "gs",
    "body": "const $1 = get${1/(.)(.*)/\\u$1$2/}(state);",
    "description": "get state selector"
  },
  "Action Creator": {
		"scope": "javascript, jsx, html, react",
    "prefix": "act",
    "body": "export function ${1:name}() {\n\treturn {\n\t\ttype: ${2:action}\n\t};\n}",
    "description": "Action Creator"
  },
  "Eslint Disable": {
    "prefix": "esd",
    "body": "/* eslint-disable */\n/* eslint-enable */",
    "description": "Eslint Disable"
  }
}
